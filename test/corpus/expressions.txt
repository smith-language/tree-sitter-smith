========
Boolean literals
========

true false

---

(source_file
  (boolean_literal)
  (boolean_literal))

========
Comparison operators
========

42 == 42
10 != 20
5 < 10
5 <= 5
10 > 5
10 >= 10

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (not_equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (less)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (less_equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (greater)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (greater_equal)
    right: (integer_literal)))

========
Logical operators
========

true and false
true or false

---

(source_file
  (binary_expression
    left: (boolean_literal)
    operator: (and)
    right: (boolean_literal))
  (binary_expression
    left: (boolean_literal)
    operator: (or)
    right: (boolean_literal)))

========
Operator precedence - and vs or
========

true and false or true

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (boolean_literal)
      operator: (and)
      right: (boolean_literal))
    operator: (or)
    right: (boolean_literal)))

========
Operator precedence - comparison vs logical
========

10 < 20 and 30 > 20

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (integer_literal)
      operator: (less)
      right: (integer_literal))
    operator: (and)
    right: (binary_expression
      left: (integer_literal)
      operator: (greater)
      right: (integer_literal))))

========
Subtraction and division
========

42 - 10 / 2

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (subtract)
    right: (binary_expression
      left: (integer_literal)
      operator: (divide)
      right: (integer_literal))))

========
Modulo operation
========

100 % 30

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (modulo)
    right: (integer_literal)))

========
Complex expression with multiple precedence levels
========

42 + 10 * 2 == 62 and true or false

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (integer_literal)
          operator: (add)
          right: (binary_expression
            left: (integer_literal)
            operator: (multiply)
            right: (integer_literal)))
        operator: (equal)
        right: (integer_literal))
      operator: (and)
      right: (boolean_literal))
    operator: (or)
    right: (boolean_literal)))

========
Negative integer_literal
========

-42

---

(source_file
  (unary_expression
    operator: (negative)
    operand: (integer_literal)))

========
Logical not
========

not true

---

(source_file
  (unary_expression
    operator: (not)
    operand: (boolean_literal)))

========
Unary precedence - negative with multiplication
========

-42 * 10

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (negative)
      operand: (integer_literal))
    operator: (multiply)
    right: (integer_literal)))

========
Unary precedence - not with and
========

not true and false

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (not)
      operand: (boolean_literal))
    operator: (and)
    right: (boolean_literal)))

========
Chained unary operators
========

not not true

---

(source_file
  (unary_expression
    operator: (not)
    operand: (unary_expression
      operator: (not)
      operand: (boolean_literal))))

========
Negative with binary expression
========

-(1 + 2)

---

(source_file
  (unary_expression
    operator: (negative)
    operand: (parenthesized_expression
      (binary_expression
        left: (integer_literal)
        operator: (add)
        right: (integer_literal)))))

========
Complex expression with unary operators
========

42 + -10 * not true

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (add)
    right: (binary_expression
      left: (unary_expression
        operator: (negative)
        operand: (integer_literal))
      operator: (multiply)
      right: (unary_expression
        operator: (not)
        operand: (boolean_literal)))))

========
Simple parenthesized expression
========

(42)

---

(source_file
  (parenthesized_expression
    (integer_literal)))

========
Parenthesized binary expression
========

(1 + 2)

---

(source_file
  (parenthesized_expression
    (binary_expression
      left: (integer_literal)
      operator: (add)
      right: (integer_literal))))

========
Precedence override with parentheses
========

(1 + 2) * 3

---

(source_file
  (binary_expression
    left: (parenthesized_expression
      (binary_expression
        left: (integer_literal)
        operator: (add)
        right: (integer_literal)))
    operator: (multiply)
    right: (integer_literal)))

========
Nested parentheses
========

((1 + 2) * 3)

---

(source_file
  (parenthesized_expression
    (binary_expression
      left: (parenthesized_expression
        (binary_expression
          left: (integer_literal)
          operator: (add)
          right: (integer_literal)))
      operator: (multiply)
      right: (integer_literal))))

========
Complex expression with parentheses and unary operators
========

not (true and false) or (-42 > 10)

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (not)
      operand: (parenthesized_expression
        (binary_expression
          left: (boolean_literal)
          operator: (and)
          right: (boolean_literal))))
    operator: (or)
    right: (parenthesized_expression
      (binary_expression
        left: (unary_expression
          operator: (negative)
          operand: (integer_literal))
        operator: (greater)
        right: (integer_literal)))))


========
Simple identifiers
========

x
_y
foo
bar_baz
myVar123

---

(source_file
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier))

========
Unicode identifiers
========

α
β
變量
переменная
σκύλος

---

(source_file
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier))

========
Identifiers in expressions
========

x + y
foo == bar
_test and value

---

(source_file
  (binary_expression
    left: (identifier)
    operator: (add)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (equal)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (and)
    right: (identifier)))

========
Keywords should not be identifiers
========

not notKeyword
var1 and var2
trueValue or falseValue

---

(source_file
  (unary_expression
    operator: (not)
    operand: (identifier))
  (binary_expression
    left: (identifier)
    operator: (and)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (or)
    right: (identifier)))


========
Variable definition where value is int literal
========

x = 42

---

(source_file
  (variable_definition
    pattern: (identifier)
    value: (integer_literal)))

========
Variable definition with type where value is int literal
========

x: i32 = 42

---

(source_file
  (variable_definition
    pattern: (identifier)
    type: (primitive_type)
    value: (integer_literal)))

========
Variable definition where value is tuple
========

x = (42, true)

---

(source_file
  (variable_definition
    pattern: (identifier)
    value: (tuple_expression
      (integer_literal)
      (boolean_literal))))


========
Variable definition where type and value are tuple
========

x: (i32, bool) = (42, true)

---

(source_file
  (variable_definition
    pattern: (identifier)
    type: (tuple_type
      (primitive_type)
      (primitive_type))
    value: (tuple_expression
      (integer_literal)
      (boolean_literal))))


========
Variable definition with tuple pattern
========

(x, y): (i32, bool) = (42, true)

---

(source_file
  (variable_definition
    pattern: (tuple_pattern
      (identifier)
      (identifier))
    type: (tuple_type
      (primitive_type)
      (primitive_type))
    value: (tuple_expression
      (integer_literal)
      (boolean_literal))))


========
Variable definition where value is array
========

x = [2, 4, 6]

---

(source_file
  (variable_definition
    pattern: (identifier)
    value: (array_expression
      (integer_literal)
      (integer_literal)
      (integer_literal))))


========
Variable definition with array pattern
========

[x, y, z] = [2, 4, 6]

---

(source_file
  (variable_definition
    pattern: (array_pattern
      (identifier)
      (identifier)
      (identifier))
    value: (array_expression
      (integer_literal)
      (integer_literal)
      (integer_literal))))

========
Variable definition with array of tuple pattern
========

[(a, b), c] = [(1, true), (2, false)]

---

(source_file
  (variable_definition
    pattern: (array_pattern
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier))
    value: (array_expression
        (tuple_expression
          (integer_literal)
          (boolean_literal))
        (tuple_expression
          (integer_literal)
          (boolean_literal)))))


========
Variable definition with typed array of tuple pattern
========

[(a, b), c]: [2](i32, bool) = [(1, true), (2, false)]

---

(source_file
  (variable_definition
    pattern: (array_pattern
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier))
    type: (array_type
        dimensions: (array_dimensions
            (integer_literal))
        element: (tuple_type
            (primitive_type)
            (primitive_type)))
    value: (array_expression
        (tuple_expression
          (integer_literal)
          (boolean_literal))
        (tuple_expression
          (integer_literal)
          (boolean_literal)))))

========
Variable definition of type matrix
========

m: [2, 3]i32 = [[1, 2, 3], [4, 5, 6]]

---

(source_file
  (variable_definition
    pattern: (identifier)
    type: (array_type
        dimensions: (array_dimensions
            (integer_literal)
            (integer_literal))
        element: (primitive_type))
    value: (array_expression
        (array_expression
          (integer_literal) (integer_literal) (integer_literal))
        (array_expression
          (integer_literal) (integer_literal) (integer_literal)))))

========
Variable definition with anonymous array dimension
========

xs: [_]i32 = [1, 2, 3]

---

(source_file
  (variable_definition
    pattern: (identifier)
    type: (array_type
        dimensions: (array_dimensions
            (anonymous))
        element: (primitive_type))
    value: (array_expression
        (integer_literal)
        (integer_literal)
        (integer_literal))))


========
Function call with positional and named arguments
========

clamp(10, min=0, max=20)

---

(source_file
  (call_expression
    function: (identifier)
    arguments: (arguments
      (integer_literal)
      (keyword_argument
        name: (identifier)
        value: (integer_literal))
      (keyword_argument
        name: (identifier)
        value: (integer_literal)))))

========
Function call with no arguments
========

foo()

---

(source_file
  (call_expression
    function: (identifier)
    arguments: (arguments)))
