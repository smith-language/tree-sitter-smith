========
Boolean literals
========

true false

---

(source_file
  (boolean_literal)
  (boolean_literal))

========
Comparison operators
========

42 == 42
10 != 20
5 < 10
5 <= 5
10 > 5
10 >= 10

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (not_equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (less)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (less_equal)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (greater)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (greater_equal)
    right: (integer_literal)))

========
Logical operators
========

true and false
true or false

---

(source_file
  (binary_expression
    left: (boolean_literal)
    operator: (and)
    right: (boolean_literal))
  (binary_expression
    left: (boolean_literal)
    operator: (or)
    right: (boolean_literal)))

========
Operator precedence - and vs or
========

true and false or true

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (boolean_literal)
      operator: (and)
      right: (boolean_literal))
    operator: (or)
    right: (boolean_literal)))

========
Operator precedence - comparison vs logical
========

10 < 20 and 30 > 20

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (integer_literal)
      operator: (less)
      right: (integer_literal))
    operator: (and)
    right: (binary_expression
      left: (integer_literal)
      operator: (greater)
      right: (integer_literal))))

========
Subtraction and division
========

42 - 10 / 2

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (subtract)
    right: (binary_expression
      left: (integer_literal)
      operator: (divide)
      right: (integer_literal))))

========
Modulo operation
========

100 % 30

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (modulo)
    right: (integer_literal)))

========
Complex expression with multiple precedence levels
========

42 + 10 * 2 == 62 and true or false

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (integer_literal)
          operator: (add)
          right: (binary_expression
            left: (integer_literal)
            operator: (multiply)
            right: (integer_literal)))
        operator: (equal)
        right: (integer_literal))
      operator: (and)
      right: (boolean_literal))
    operator: (or)
    right: (boolean_literal)))

========
Negative integer_literal
========

-42

---

(source_file
  (unary_expression
    operator: (negative)
    operand: (integer_literal)))

========
Logical not
========

not true

---

(source_file
  (unary_expression
    operator: (not)
    operand: (boolean_literal)))

========
Unary precedence - negative with multiplication
========

-42 * 10

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (negative)
      operand: (integer_literal))
    operator: (multiply)
    right: (integer_literal)))

========
Unary precedence - not with and
========

not true and false

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (not)
      operand: (boolean_literal))
    operator: (and)
    right: (boolean_literal)))

========
Chained unary operators
========

not not true

---

(source_file
  (unary_expression
    operator: (not)
    operand: (unary_expression
      operator: (not)
      operand: (boolean_literal))))

========
Negative with binary expression
========

-(1 + 2)

---

(source_file
  (unary_expression
    operator: (negative)
    operand: (parenthesized_expression
      (binary_expression
        left: (integer_literal)
        operator: (add)
        right: (integer_literal)))))

========
Complex expression with unary operators
========

42 + -10 * not true

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (add)
    right: (binary_expression
      left: (unary_expression
        operator: (negative)
        operand: (integer_literal))
      operator: (multiply)
      right: (unary_expression
        operator: (not)
        operand: (boolean_literal)))))

========
Simple parenthesized expression
========

(42)

---

(source_file
  (parenthesized_expression
    (integer_literal)))

========
Parenthesized binary expression
========

(1 + 2)

---

(source_file
  (parenthesized_expression
    (binary_expression
      left: (integer_literal)
      operator: (add)
      right: (integer_literal))))

========
Precedence override with parentheses
========

(1 + 2) * 3

---

(source_file
  (binary_expression
    left: (parenthesized_expression
      (binary_expression
        left: (integer_literal)
        operator: (add)
        right: (integer_literal)))
    operator: (multiply)
    right: (integer_literal)))

========
Nested parentheses
========

((1 + 2) * 3)

---

(source_file
  (parenthesized_expression
    (binary_expression
      left: (parenthesized_expression
        (binary_expression
          left: (integer_literal)
          operator: (add)
          right: (integer_literal)))
      operator: (multiply)
      right: (integer_literal))))

========
Complex expression with parentheses and unary operators
========

not (true and false) or (-42 > 10)

---

(source_file
  (binary_expression
    left: (unary_expression
      operator: (not)
      operand: (parenthesized_expression
        (binary_expression
          left: (boolean_literal)
          operator: (and)
          right: (boolean_literal))))
    operator: (or)
    right: (parenthesized_expression
      (binary_expression
        left: (unary_expression
          operator: (negative)
          operand: (integer_literal))
        operator: (greater)
        right: (integer_literal)))))
